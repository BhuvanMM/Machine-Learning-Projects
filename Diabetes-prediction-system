

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

df = pd.read_csv('diabetes.csv')

df.head()

df.shape

df.describe()

df['Outcome'].value_counts()

df.groupby('Outcome').mean()

#sepearting data and labels
X = df.drop(columns='Outcome',axis=1)
Y = df['Outcome']

X.head()

Y.head()

scaler = StandardScaler()

scaler.fit(X)

standarized_x = scaler.transform(X)

print(standarized_x.std())

X = standarized_x
Y = df['Outcome']

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

classifier = svm.SVC(kernel='linear')

#training the support vector machine classifier
classifier.fit(X_train,Y_train)

#Evaluate our model
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction,Y_train)

print('Accuracy score of the trained data:')
print(training_data_accuracy)

#Accuracy on test data
X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction,Y_test)

print('Accuarcy Score of the test data:')
print(test_data_accuracy)

#Making a prediction system
input_data = (5,166,72,19,175,25.8,0.587,51)

#change it to numpy array
input_data_as_np = np.asarray(input_data)

#reshape the array
input_data_reshaped = input_data_as_np.reshape(1,-1)

#standardize the data
std_data = scaler.transform(input_data_reshaped)


#make prediction
prediction = classifier.predict(std_data)

if(prediction[0] == 0):
  print('The person is not Diabetic')
else:
  print('The person is Diabetic')

